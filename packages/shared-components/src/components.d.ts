/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DialogHandler } from "./models/dialog/dialog-handler";
import { DialogConfig } from "./components/dialogs/onto-dialog";
import { AuthenticatedUser, Awaitable, License, OperationStatusSummary, ProductInfo, Repository, RepositoryReference, RepositorySizeInfo, SearchButtonConfig, SecurityConfig, ToastMessage } from "../../api/dist/ontotext-workbench-api.d";
import { DropdownItem } from "./models/dropdown/dropdown-item";
import { OntoTooltipPlacement } from "./components/onto-tooltip/models/onto-tooltip-placement";
import { DropdownItemAlignment } from "./models/dropdown/dropdown-item-alignment";
import { ExternalMenuModel } from "./components/onto-navbar/external-menu-model";
import { NavbarToggledEvent } from "./components/onto-navbar/navbar-toggled-event";
import { ToggleEventPayload } from "./models/toggle-switch/toggle-event-payload";
import { TranslationParameter } from "./models/translation/translation-parameter";
export { DialogHandler } from "./models/dialog/dialog-handler";
export { DialogConfig } from "./components/dialogs/onto-dialog";
export { AuthenticatedUser, Awaitable, License, OperationStatusSummary, ProductInfo, Repository, RepositoryReference, RepositorySizeInfo, SearchButtonConfig, SecurityConfig, ToastMessage } from "../../api/dist/ontotext-workbench-api.d";
export { DropdownItem } from "./models/dropdown/dropdown-item";
export { OntoTooltipPlacement } from "./components/onto-tooltip/models/onto-tooltip-placement";
export { DropdownItemAlignment } from "./models/dropdown/dropdown-item-alignment";
export { ExternalMenuModel } from "./components/onto-navbar/external-menu-model";
export { NavbarToggledEvent } from "./components/onto-navbar/navbar-toggled-event";
export { ToggleEventPayload } from "./models/toggle-switch/toggle-event-payload";
export { TranslationParameter } from "./models/translation/translation-parameter";
export namespace Components {
    /**
     * OntoCookieConsent component for handling cookie consent functionality.
     * This component displays a cookie consent modal and manages the visibility of a cookie policy dialog.
     * @implements DialogHandler
     */
    interface OntoCookieConsent {
    }
    interface OntoCookiePolicyDialog {
        /**
          * The dialog handler for managing the dialog's behavior.
         */
        "dialogHandler": DialogHandler;
    }
    interface OntoDialog {
        /**
          * Configuration object for the dialog.
         */
        "config": DialogConfig;
    }
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface OntoDropdown {
        /**
          * Flag to determine if the dropdown should close automatically when a click occurs outside the dropdown.
          * @default true
         */
        "autoClose": boolean;
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
          * @default DropdownItemAlignment.LEFT
         */
        "dropdownAlignment": DropdownItemAlignment;
        /**
          * Defines the value of the `guide-selector` attribute for the dropdown trigger button.
         */
        "dropdownButtonGuideSelector": string;
        /**
          * The name for the dropdown button. This can either be a string (used directly as the button label) or a Stencil component (used to render the button content). It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonNameLabelKey } will be used.
         */
        "dropdownButtonName": string;
        /**
          * The translation label key for the dropdown button name. It will be used if {@link OntoDropdown#dropdownButtonName } is not present.
         */
        "dropdownButtonNameLabelKey": string;
        /**
          * The dropdown button tooltip. It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonTooltipLabelKey } will be used.
         */
        "dropdownButtonTooltip": string | Awaitable<string>;
        /**
          * The translation label key for the dropdown button tooltip. It will be used if {@link OntoDropdown#dropdownButtonTooltip } is not present.
         */
        "dropdownButtonTooltipLabelKey": string;
        /**
          * Specifies the events that trigger the dropdown button tooltip to appear. Multiple event names should be separated by spaces.
          * @default 'manual'
         */
        "dropdownTooltipTrigger": string;
        /**
          * Icon class for the main dropdown button.
          * @default ''
         */
        "iconClass": string;
        /**
          * Array of dropdown options.
         */
        "items": DropdownItem<any>[];
        /**
          * Specifies the items tooltip placement. Accepts a string of the placement or a function that returns the placement. The function takes the isOpen parameter as a boolean and returns the placement as a string. If not provided, the tooltip will be placed to the left.
          * @default OntoTooltipPlacement.LEFT
         */
        "tooltipPlacement": OntoTooltipPlacement | ((isOpen: boolean) => OntoTooltipPlacement);
        /**
          * The tooltip theme to be used. For more information {@link OntoTooltipConfiguration#theme }.
         */
        "tooltipTheme": string;
    }
    /**
     * OntoFooter component for rendering the footer of the application.
     * This component displays information about GraphDB, RDF4J, Connectors, and Workbench versions,
     * as well as copyright information.
     */
    interface OntoFooter {
    }
    /**
     * OntoHeader component for rendering the header of the application.
     * This component includes a search component, license alert (if applicable),
     * repository selector, and language selector.
     */
    interface OntoHeader {
    }
    interface OntoLanguageSelector {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
          * @default DropdownItemAlignment.LEFT
         */
        "dropdownAlignment": DropdownItemAlignment;
    }
    interface OntoLayout {
    }
    interface OntoLicenseAlert {
        /**
          * The current license information
         */
        "license": License;
    }
    interface OntoNavbar {
        /**
          * Configuration for the menu items model. This is the external model that is used to build the internal model.
         */
        "menuItems": ExternalMenuModel;
        /**
          * Configuration whether the navbar should be collapsed.
         */
        "navbarCollapsed": boolean;
    }
    interface OntoOperationsNotification {
        /**
          * The active operations summary. Holds general status and all current operations
         */
        "activeOperations": OperationStatusSummary;
    }
    interface OntoPermissionBanner {
    }
    /**
     * OntoRdfSearch component for RDF resource search.
     * This component is responsible for showing/hiding the search menu in the header
     */
    interface OntoRdfSearch {
    }
    interface OntoRepositorySelector {
        /**
          * Determines whether the current user has write access to the repository.
         */
        "canWriteRepo": (repo: Repository) => boolean;
        /**
          * The currently selected repository.
         */
        "currentRepository": Repository;
        /**
          * The list of repositories to show in the dropdown.
         */
        "items": DropdownItem<Repository>[];
        /**
          * Fetches repository size info used to build tooltips.
         */
        "repositorySizeInfoFetcher": (repo: Repository) => Promise<RepositorySizeInfo>;
        /**
          * Formatter for numeric values in tooltips.
         */
        "totalTripletsFormatter": Intl.NumberFormat;
    }
    interface OntoSearchIcon {
    }
    /**
     * A component for rendering RDF search resource input with configurable buttons.
     * This component provides a text input for search queries and a set of configurable buttons.
     */
    interface OntoSearchResourceInput {
        /**
          * Button configuration for the search resource input. Holds buttons to be displayed, as well as additional configuration, such as whether the buttons should be treated as radio buttons.
         */
        "buttonConfig": SearchButtonConfig;
        /**
          * The search resource component can appear more than once per page. This context is used to differentiate them. When a suggestion is selected different parents may need to do different things. The context is emitted alongside the suggestion upon select.
         */
        "context": string;
        /**
          * Whether the search component is currently hidden. Can be shown/hidden in the RDF search
          * @default false
         */
        "isHidden": boolean;
        /**
          * Whether to preserve the input value and last selected suggestion If true, both will be stored in local storage and loaded, when the component is rendered
         */
        "preserveSearch": boolean;
        /**
          * Whether the rdf resource pre-search validation should be skipped.
          * @default false
         */
        "skipValidation": boolean;
    }
    /**
     * A component for managing test context in the application. Used only for testing
     */
    interface OntoTestContext {
        /**
          * Adds a toast notification to the application.
          * @param toast - The ToastMessage object containing the notification details   such as message content, type, and display options.
         */
        "addToastr": (toast: ToastMessage) => Promise<void>;
        /**
          * Changes the application's language by updating the language bundle.  This method uses the LanguageContextService to update the language bundle based on the provided language code. It retrieves the corresponding bundle from the predefined bundles object and updates the context.
          * @param language - The language code (e.g., 'en' for English, 'fr' for French)   representing the desired language to switch to.
          * @returns A Promise that resolves when the language update is complete.
         */
        "changeLanguage": (language: string) => Promise<void>;
        /**
          * Emits {@see NavigationEnd} event with <code>oldUrl</code> and <code>newUrl</code>.
          * @param oldUrl - the value will be used as old url in the event payload.
          * @param newUrl - the value will be used as new url in the event payload.
         */
        "emitNavigateEndEvent": (oldUrl: string, newUrl: string) => Promise<void>;
        /**
          * Loads the repositories in the application.
         */
        "loadRepositories": () => Promise<void>;
        /**
          * Sets the authenticated user in the application context.
          * @param user - The AuthenticatedUser object containing the user's authentication information.
          * @returns A Promise that resolves when the authenticated user has been successfully updated
         */
        "setAuthenticatedUser": (user: AuthenticatedUser) => Promise<void>;
        /**
          * Sets the autocomplete status in the context.
          * @param enabled whether autocomplete is enabled or disabled.
         */
        "setAutocomplete": (enabled: boolean) => Promise<void>;
        /**
          * Sets the security configuration in the application context.
          * @param securityConfig - The SecurityConfig object containing the new security settings to be applied.
          * @returns A Promise that resolves when the security configuration has been successfully updated.
         */
        "setSecurityConfig": (securityConfig: SecurityConfig) => Promise<void>;
        /**
          * Updates whether the active repository request is in a loading state.
          * @param isLoading - A boolean value indicating whether the repository location is in a loading state.   True indicates request is in progress, false indicates loading is complete.
          * @returns A Promise that resolves when the loading state update is complete.
         */
        "updateIsLoadingActiveRepositoryLocation": (isLoading: boolean) => Promise<void>;
        /**
          * Updates the license information in the context.  This method uses the LicenseContextService to update the license and returns a resolved Promise once the operation is complete.
          * @param license - The new License object to be set.
          * @returns A Promise that resolves when the license update is complete.
         */
        "updateLicense": (license: License) => Promise<void>;
        /**
          * Sets the namespace map in the application context.
          * @param rawNamespaces - The namespace map containing prefix-to-URI mappings to be used throughout the application
          * @returns A Promise that resolves when the namespace map has been successfully updated
         */
        "updateNamespaces": (rawNamespaces: Record<string, string>) => Promise<void>;
        /**
          * Updates the product information in the context.  This method uses the ProductInfoContextService to update the product information and returns a resolved Promise once the operation is complete.
          * @param productInfo - The new ProductInfo object to be set.
          * @returns A Promise that resolves when the product information update is complete.
         */
        "updateProductInfo": (productInfo: ProductInfo) => Promise<void>;
        /**
          * Updates the {@see SecurityContextService} map with <code>restrictedPages</code>.
          * @param restrictedPages - the map with restricted pages to be set in context service as new value.
         */
        "updateRestrictedPage": (restrictedPages: Record<string, boolean>) => Promise<void>;
        /**
          * Updates the selected repository in the application context.
          * @method updateSelectedRepository
          * @param repositoryReference - The RepositoryReference object representing the repository to select.
          * @returns A Promise that resolves when the selected repository has been updated.
         */
        "updateSelectedRepository": (repositoryReference: RepositoryReference) => Promise<void>;
    }
    /**
     * OntoToastr component for displaying toast notifications.
     * This component manages a list of toast messages and handles their display,
     * automatic removal after timeout, and user interactions like hover behavior.
     */
    interface OntoToastr {
    }
    interface OntoToggleSwitch {
        /**
          * Determines whether the toggle switch is checked or not.
          * @default false
         */
        "checked": boolean;
        /**
          * The context for the tooltip, if supplied. This is useful if you have multiple toggle switches, to know which one is being toggled.
         */
        "context"?: string;
        /**
          * The key used for translating the label text, if supplied.
         */
        "labelKey"?: string;
        /**
          * The translation label key for the tooltip message, if supplied.
         */
        "tooltipTranslationKey"?: string;
    }
    interface OntoTooltip {
    }
    interface OntoUserLogin {
    }
    /**
     * This component displays the current user's name and provides options
     * for navigating to settings and logging out.
     */
    interface OntoUserMenu {
        /**
          * Current security config
         */
        "securityConfig": SecurityConfig;
        /**
          * Currently authenticated user
         */
        "user": AuthenticatedUser;
    }
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface TranslateLabel {
        /**
          * Represents a label key.
         */
        "labelKey": string;
        /**
          * Represents an array of translation parameters.
          * @default []
         */
        "translationParameters": TranslationParameter[];
    }
}
export interface OntoCookieConsentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoCookieConsentElement;
}
export interface OntoDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoDropdownElement;
}
export interface OntoNavbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoNavbarElement;
}
export interface OntoToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoToggleSwitchElement;
}
declare global {
    interface HTMLOntoCookieConsentElementEventMap {
        "consentGiven": void;
    }
    /**
     * OntoCookieConsent component for handling cookie consent functionality.
     * This component displays a cookie consent modal and manages the visibility of a cookie policy dialog.
     * @implements DialogHandler
     */
    interface HTMLOntoCookieConsentElement extends Components.OntoCookieConsent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoCookieConsentElementEventMap>(type: K, listener: (this: HTMLOntoCookieConsentElement, ev: OntoCookieConsentCustomEvent<HTMLOntoCookieConsentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoCookieConsentElementEventMap>(type: K, listener: (this: HTMLOntoCookieConsentElement, ev: OntoCookieConsentCustomEvent<HTMLOntoCookieConsentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoCookieConsentElement: {
        prototype: HTMLOntoCookieConsentElement;
        new (): HTMLOntoCookieConsentElement;
    };
    interface HTMLOntoCookiePolicyDialogElement extends Components.OntoCookiePolicyDialog, HTMLStencilElement {
    }
    var HTMLOntoCookiePolicyDialogElement: {
        prototype: HTMLOntoCookiePolicyDialogElement;
        new (): HTMLOntoCookiePolicyDialogElement;
    };
    interface HTMLOntoDialogElement extends Components.OntoDialog, HTMLStencilElement {
    }
    var HTMLOntoDialogElement: {
        prototype: HTMLOntoDialogElement;
        new (): HTMLOntoDialogElement;
    };
    interface HTMLOntoDropdownElementEventMap {
        "valueChanged": any;
    }
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface HTMLOntoDropdownElement extends Components.OntoDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoDropdownElementEventMap>(type: K, listener: (this: HTMLOntoDropdownElement, ev: OntoDropdownCustomEvent<HTMLOntoDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoDropdownElementEventMap>(type: K, listener: (this: HTMLOntoDropdownElement, ev: OntoDropdownCustomEvent<HTMLOntoDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoDropdownElement: {
        prototype: HTMLOntoDropdownElement;
        new (): HTMLOntoDropdownElement;
    };
    /**
     * OntoFooter component for rendering the footer of the application.
     * This component displays information about GraphDB, RDF4J, Connectors, and Workbench versions,
     * as well as copyright information.
     */
    interface HTMLOntoFooterElement extends Components.OntoFooter, HTMLStencilElement {
    }
    var HTMLOntoFooterElement: {
        prototype: HTMLOntoFooterElement;
        new (): HTMLOntoFooterElement;
    };
    /**
     * OntoHeader component for rendering the header of the application.
     * This component includes a search component, license alert (if applicable),
     * repository selector, and language selector.
     */
    interface HTMLOntoHeaderElement extends Components.OntoHeader, HTMLStencilElement {
    }
    var HTMLOntoHeaderElement: {
        prototype: HTMLOntoHeaderElement;
        new (): HTMLOntoHeaderElement;
    };
    interface HTMLOntoLanguageSelectorElement extends Components.OntoLanguageSelector, HTMLStencilElement {
    }
    var HTMLOntoLanguageSelectorElement: {
        prototype: HTMLOntoLanguageSelectorElement;
        new (): HTMLOntoLanguageSelectorElement;
    };
    interface HTMLOntoLayoutElement extends Components.OntoLayout, HTMLStencilElement {
    }
    var HTMLOntoLayoutElement: {
        prototype: HTMLOntoLayoutElement;
        new (): HTMLOntoLayoutElement;
    };
    interface HTMLOntoLicenseAlertElement extends Components.OntoLicenseAlert, HTMLStencilElement {
    }
    var HTMLOntoLicenseAlertElement: {
        prototype: HTMLOntoLicenseAlertElement;
        new (): HTMLOntoLicenseAlertElement;
    };
    interface HTMLOntoNavbarElementEventMap {
        "navbarToggled": NavbarToggledEvent;
    }
    interface HTMLOntoNavbarElement extends Components.OntoNavbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoNavbarElementEventMap>(type: K, listener: (this: HTMLOntoNavbarElement, ev: OntoNavbarCustomEvent<HTMLOntoNavbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoNavbarElementEventMap>(type: K, listener: (this: HTMLOntoNavbarElement, ev: OntoNavbarCustomEvent<HTMLOntoNavbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoNavbarElement: {
        prototype: HTMLOntoNavbarElement;
        new (): HTMLOntoNavbarElement;
    };
    interface HTMLOntoOperationsNotificationElement extends Components.OntoOperationsNotification, HTMLStencilElement {
    }
    var HTMLOntoOperationsNotificationElement: {
        prototype: HTMLOntoOperationsNotificationElement;
        new (): HTMLOntoOperationsNotificationElement;
    };
    interface HTMLOntoPermissionBannerElement extends Components.OntoPermissionBanner, HTMLStencilElement {
    }
    var HTMLOntoPermissionBannerElement: {
        prototype: HTMLOntoPermissionBannerElement;
        new (): HTMLOntoPermissionBannerElement;
    };
    /**
     * OntoRdfSearch component for RDF resource search.
     * This component is responsible for showing/hiding the search menu in the header
     */
    interface HTMLOntoRdfSearchElement extends Components.OntoRdfSearch, HTMLStencilElement {
    }
    var HTMLOntoRdfSearchElement: {
        prototype: HTMLOntoRdfSearchElement;
        new (): HTMLOntoRdfSearchElement;
    };
    interface HTMLOntoRepositorySelectorElement extends Components.OntoRepositorySelector, HTMLStencilElement {
    }
    var HTMLOntoRepositorySelectorElement: {
        prototype: HTMLOntoRepositorySelectorElement;
        new (): HTMLOntoRepositorySelectorElement;
    };
    interface HTMLOntoSearchIconElement extends Components.OntoSearchIcon, HTMLStencilElement {
    }
    var HTMLOntoSearchIconElement: {
        prototype: HTMLOntoSearchIconElement;
        new (): HTMLOntoSearchIconElement;
    };
    /**
     * A component for rendering RDF search resource input with configurable buttons.
     * This component provides a text input for search queries and a set of configurable buttons.
     */
    interface HTMLOntoSearchResourceInputElement extends Components.OntoSearchResourceInput, HTMLStencilElement {
    }
    var HTMLOntoSearchResourceInputElement: {
        prototype: HTMLOntoSearchResourceInputElement;
        new (): HTMLOntoSearchResourceInputElement;
    };
    /**
     * A component for managing test context in the application. Used only for testing
     */
    interface HTMLOntoTestContextElement extends Components.OntoTestContext, HTMLStencilElement {
    }
    var HTMLOntoTestContextElement: {
        prototype: HTMLOntoTestContextElement;
        new (): HTMLOntoTestContextElement;
    };
    /**
     * OntoToastr component for displaying toast notifications.
     * This component manages a list of toast messages and handles their display,
     * automatic removal after timeout, and user interactions like hover behavior.
     */
    interface HTMLOntoToastrElement extends Components.OntoToastr, HTMLStencilElement {
    }
    var HTMLOntoToastrElement: {
        prototype: HTMLOntoToastrElement;
        new (): HTMLOntoToastrElement;
    };
    interface HTMLOntoToggleSwitchElementEventMap {
        "toggleChanged": ToggleEventPayload;
    }
    interface HTMLOntoToggleSwitchElement extends Components.OntoToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoToggleSwitchElementEventMap>(type: K, listener: (this: HTMLOntoToggleSwitchElement, ev: OntoToggleSwitchCustomEvent<HTMLOntoToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoToggleSwitchElementEventMap>(type: K, listener: (this: HTMLOntoToggleSwitchElement, ev: OntoToggleSwitchCustomEvent<HTMLOntoToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoToggleSwitchElement: {
        prototype: HTMLOntoToggleSwitchElement;
        new (): HTMLOntoToggleSwitchElement;
    };
    interface HTMLOntoTooltipElement extends Components.OntoTooltip, HTMLStencilElement {
    }
    var HTMLOntoTooltipElement: {
        prototype: HTMLOntoTooltipElement;
        new (): HTMLOntoTooltipElement;
    };
    interface HTMLOntoUserLoginElement extends Components.OntoUserLogin, HTMLStencilElement {
    }
    var HTMLOntoUserLoginElement: {
        prototype: HTMLOntoUserLoginElement;
        new (): HTMLOntoUserLoginElement;
    };
    /**
     * This component displays the current user's name and provides options
     * for navigating to settings and logging out.
     */
    interface HTMLOntoUserMenuElement extends Components.OntoUserMenu, HTMLStencilElement {
    }
    var HTMLOntoUserMenuElement: {
        prototype: HTMLOntoUserMenuElement;
        new (): HTMLOntoUserMenuElement;
    };
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface HTMLTranslateLabelElement extends Components.TranslateLabel, HTMLStencilElement {
    }
    var HTMLTranslateLabelElement: {
        prototype: HTMLTranslateLabelElement;
        new (): HTMLTranslateLabelElement;
    };
    interface HTMLElementTagNameMap {
        "onto-cookie-consent": HTMLOntoCookieConsentElement;
        "onto-cookie-policy-dialog": HTMLOntoCookiePolicyDialogElement;
        "onto-dialog": HTMLOntoDialogElement;
        "onto-dropdown": HTMLOntoDropdownElement;
        "onto-footer": HTMLOntoFooterElement;
        "onto-header": HTMLOntoHeaderElement;
        "onto-language-selector": HTMLOntoLanguageSelectorElement;
        "onto-layout": HTMLOntoLayoutElement;
        "onto-license-alert": HTMLOntoLicenseAlertElement;
        "onto-navbar": HTMLOntoNavbarElement;
        "onto-operations-notification": HTMLOntoOperationsNotificationElement;
        "onto-permission-banner": HTMLOntoPermissionBannerElement;
        "onto-rdf-search": HTMLOntoRdfSearchElement;
        "onto-repository-selector": HTMLOntoRepositorySelectorElement;
        "onto-search-icon": HTMLOntoSearchIconElement;
        "onto-search-resource-input": HTMLOntoSearchResourceInputElement;
        "onto-test-context": HTMLOntoTestContextElement;
        "onto-toastr": HTMLOntoToastrElement;
        "onto-toggle-switch": HTMLOntoToggleSwitchElement;
        "onto-tooltip": HTMLOntoTooltipElement;
        "onto-user-login": HTMLOntoUserLoginElement;
        "onto-user-menu": HTMLOntoUserMenuElement;
        "translate-label": HTMLTranslateLabelElement;
    }
}
declare namespace LocalJSX {
    /**
     * OntoCookieConsent component for handling cookie consent functionality.
     * This component displays a cookie consent modal and manages the visibility of a cookie policy dialog.
     * @implements DialogHandler
     */
    interface OntoCookieConsent {
        /**
          * Event emitter for when consent is given
         */
        "onConsentGiven"?: (event: OntoCookieConsentCustomEvent<void>) => void;
    }
    interface OntoCookiePolicyDialog {
        /**
          * The dialog handler for managing the dialog's behavior.
         */
        "dialogHandler": DialogHandler;
    }
    interface OntoDialog {
        /**
          * Configuration object for the dialog.
         */
        "config"?: DialogConfig;
    }
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface OntoDropdown {
        /**
          * Flag to determine if the dropdown should close automatically when a click occurs outside the dropdown.
          * @default true
         */
        "autoClose"?: boolean;
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
          * @default DropdownItemAlignment.LEFT
         */
        "dropdownAlignment"?: DropdownItemAlignment;
        /**
          * Defines the value of the `guide-selector` attribute for the dropdown trigger button.
         */
        "dropdownButtonGuideSelector"?: string;
        /**
          * The name for the dropdown button. This can either be a string (used directly as the button label) or a Stencil component (used to render the button content). It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonNameLabelKey } will be used.
         */
        "dropdownButtonName"?: string;
        /**
          * The translation label key for the dropdown button name. It will be used if {@link OntoDropdown#dropdownButtonName } is not present.
         */
        "dropdownButtonNameLabelKey"?: string;
        /**
          * The dropdown button tooltip. It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonTooltipLabelKey } will be used.
         */
        "dropdownButtonTooltip"?: string | Awaitable<string>;
        /**
          * The translation label key for the dropdown button tooltip. It will be used if {@link OntoDropdown#dropdownButtonTooltip } is not present.
         */
        "dropdownButtonTooltipLabelKey"?: string;
        /**
          * Specifies the events that trigger the dropdown button tooltip to appear. Multiple event names should be separated by spaces.
          * @default 'manual'
         */
        "dropdownTooltipTrigger"?: string;
        /**
          * Icon class for the main dropdown button.
          * @default ''
         */
        "iconClass"?: string;
        /**
          * Array of dropdown options.
         */
        "items"?: DropdownItem<any>[];
        /**
          * Event emitted when a dropdown item is selected. The event payload contains the value of the selected item.
         */
        "onValueChanged"?: (event: OntoDropdownCustomEvent<any>) => void;
        /**
          * Specifies the items tooltip placement. Accepts a string of the placement or a function that returns the placement. The function takes the isOpen parameter as a boolean and returns the placement as a string. If not provided, the tooltip will be placed to the left.
          * @default OntoTooltipPlacement.LEFT
         */
        "tooltipPlacement"?: OntoTooltipPlacement | ((isOpen: boolean) => OntoTooltipPlacement);
        /**
          * The tooltip theme to be used. For more information {@link OntoTooltipConfiguration#theme }.
         */
        "tooltipTheme"?: string;
    }
    /**
     * OntoFooter component for rendering the footer of the application.
     * This component displays information about GraphDB, RDF4J, Connectors, and Workbench versions,
     * as well as copyright information.
     */
    interface OntoFooter {
    }
    /**
     * OntoHeader component for rendering the header of the application.
     * This component includes a search component, license alert (if applicable),
     * repository selector, and language selector.
     */
    interface OntoHeader {
    }
    interface OntoLanguageSelector {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
          * @default DropdownItemAlignment.LEFT
         */
        "dropdownAlignment"?: DropdownItemAlignment;
    }
    interface OntoLayout {
    }
    interface OntoLicenseAlert {
        /**
          * The current license information
         */
        "license"?: License;
    }
    interface OntoNavbar {
        /**
          * Configuration for the menu items model. This is the external model that is used to build the internal model.
         */
        "menuItems"?: ExternalMenuModel;
        /**
          * Configuration whether the navbar should be collapsed.
         */
        "navbarCollapsed"?: boolean;
        /**
          * Event fired when the navbar is toggled.
         */
        "onNavbarToggled"?: (event: OntoNavbarCustomEvent<NavbarToggledEvent>) => void;
    }
    interface OntoOperationsNotification {
        /**
          * The active operations summary. Holds general status and all current operations
         */
        "activeOperations"?: OperationStatusSummary;
    }
    interface OntoPermissionBanner {
    }
    /**
     * OntoRdfSearch component for RDF resource search.
     * This component is responsible for showing/hiding the search menu in the header
     */
    interface OntoRdfSearch {
    }
    interface OntoRepositorySelector {
        /**
          * Determines whether the current user has write access to the repository.
         */
        "canWriteRepo"?: (repo: Repository) => boolean;
        /**
          * The currently selected repository.
         */
        "currentRepository"?: Repository;
        /**
          * The list of repositories to show in the dropdown.
         */
        "items"?: DropdownItem<Repository>[];
        /**
          * Fetches repository size info used to build tooltips.
         */
        "repositorySizeInfoFetcher"?: (repo: Repository) => Promise<RepositorySizeInfo>;
        /**
          * Formatter for numeric values in tooltips.
         */
        "totalTripletsFormatter"?: Intl.NumberFormat;
    }
    interface OntoSearchIcon {
    }
    /**
     * A component for rendering RDF search resource input with configurable buttons.
     * This component provides a text input for search queries and a set of configurable buttons.
     */
    interface OntoSearchResourceInput {
        /**
          * Button configuration for the search resource input. Holds buttons to be displayed, as well as additional configuration, such as whether the buttons should be treated as radio buttons.
         */
        "buttonConfig"?: SearchButtonConfig;
        /**
          * The search resource component can appear more than once per page. This context is used to differentiate them. When a suggestion is selected different parents may need to do different things. The context is emitted alongside the suggestion upon select.
         */
        "context"?: string;
        /**
          * Whether the search component is currently hidden. Can be shown/hidden in the RDF search
          * @default false
         */
        "isHidden"?: boolean;
        /**
          * Whether to preserve the input value and last selected suggestion If true, both will be stored in local storage and loaded, when the component is rendered
         */
        "preserveSearch"?: boolean;
        /**
          * Whether the rdf resource pre-search validation should be skipped.
          * @default false
         */
        "skipValidation"?: boolean;
    }
    /**
     * A component for managing test context in the application. Used only for testing
     */
    interface OntoTestContext {
    }
    /**
     * OntoToastr component for displaying toast notifications.
     * This component manages a list of toast messages and handles their display,
     * automatic removal after timeout, and user interactions like hover behavior.
     */
    interface OntoToastr {
    }
    interface OntoToggleSwitch {
        /**
          * Determines whether the toggle switch is checked or not.
          * @default false
         */
        "checked"?: boolean;
        /**
          * The context for the tooltip, if supplied. This is useful if you have multiple toggle switches, to know which one is being toggled.
         */
        "context"?: string;
        /**
          * The key used for translating the label text, if supplied.
         */
        "labelKey"?: string;
        /**
          * Event emitted when the toggle switch is clicked, carrying the new checked status.
         */
        "onToggleChanged"?: (event: OntoToggleSwitchCustomEvent<ToggleEventPayload>) => void;
        /**
          * The translation label key for the tooltip message, if supplied.
         */
        "tooltipTranslationKey"?: string;
    }
    interface OntoTooltip {
    }
    interface OntoUserLogin {
    }
    /**
     * This component displays the current user's name and provides options
     * for navigating to settings and logging out.
     */
    interface OntoUserMenu {
        /**
          * Current security config
         */
        "securityConfig"?: SecurityConfig;
        /**
          * Currently authenticated user
         */
        "user"?: AuthenticatedUser;
    }
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface TranslateLabel {
        /**
          * Represents a label key.
         */
        "labelKey"?: string;
        /**
          * Represents an array of translation parameters.
          * @default []
         */
        "translationParameters"?: TranslationParameter[];
    }
    interface IntrinsicElements {
        "onto-cookie-consent": OntoCookieConsent;
        "onto-cookie-policy-dialog": OntoCookiePolicyDialog;
        "onto-dialog": OntoDialog;
        "onto-dropdown": OntoDropdown;
        "onto-footer": OntoFooter;
        "onto-header": OntoHeader;
        "onto-language-selector": OntoLanguageSelector;
        "onto-layout": OntoLayout;
        "onto-license-alert": OntoLicenseAlert;
        "onto-navbar": OntoNavbar;
        "onto-operations-notification": OntoOperationsNotification;
        "onto-permission-banner": OntoPermissionBanner;
        "onto-rdf-search": OntoRdfSearch;
        "onto-repository-selector": OntoRepositorySelector;
        "onto-search-icon": OntoSearchIcon;
        "onto-search-resource-input": OntoSearchResourceInput;
        "onto-test-context": OntoTestContext;
        "onto-toastr": OntoToastr;
        "onto-toggle-switch": OntoToggleSwitch;
        "onto-tooltip": OntoTooltip;
        "onto-user-login": OntoUserLogin;
        "onto-user-menu": OntoUserMenu;
        "translate-label": TranslateLabel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * OntoCookieConsent component for handling cookie consent functionality.
             * This component displays a cookie consent modal and manages the visibility of a cookie policy dialog.
             * @implements DialogHandler
             */
            "onto-cookie-consent": LocalJSX.OntoCookieConsent & JSXBase.HTMLAttributes<HTMLOntoCookieConsentElement>;
            "onto-cookie-policy-dialog": LocalJSX.OntoCookiePolicyDialog & JSXBase.HTMLAttributes<HTMLOntoCookiePolicyDialogElement>;
            "onto-dialog": LocalJSX.OntoDialog & JSXBase.HTMLAttributes<HTMLOntoDialogElement>;
            /**
             * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
             * and items, making it versatile for various use cases. It also integrates with a translation service to handle
             * internationalization.
             */
            "onto-dropdown": LocalJSX.OntoDropdown & JSXBase.HTMLAttributes<HTMLOntoDropdownElement>;
            /**
             * OntoFooter component for rendering the footer of the application.
             * This component displays information about GraphDB, RDF4J, Connectors, and Workbench versions,
             * as well as copyright information.
             */
            "onto-footer": LocalJSX.OntoFooter & JSXBase.HTMLAttributes<HTMLOntoFooterElement>;
            /**
             * OntoHeader component for rendering the header of the application.
             * This component includes a search component, license alert (if applicable),
             * repository selector, and language selector.
             */
            "onto-header": LocalJSX.OntoHeader & JSXBase.HTMLAttributes<HTMLOntoHeaderElement>;
            "onto-language-selector": LocalJSX.OntoLanguageSelector & JSXBase.HTMLAttributes<HTMLOntoLanguageSelectorElement>;
            "onto-layout": LocalJSX.OntoLayout & JSXBase.HTMLAttributes<HTMLOntoLayoutElement>;
            "onto-license-alert": LocalJSX.OntoLicenseAlert & JSXBase.HTMLAttributes<HTMLOntoLicenseAlertElement>;
            "onto-navbar": LocalJSX.OntoNavbar & JSXBase.HTMLAttributes<HTMLOntoNavbarElement>;
            "onto-operations-notification": LocalJSX.OntoOperationsNotification & JSXBase.HTMLAttributes<HTMLOntoOperationsNotificationElement>;
            "onto-permission-banner": LocalJSX.OntoPermissionBanner & JSXBase.HTMLAttributes<HTMLOntoPermissionBannerElement>;
            /**
             * OntoRdfSearch component for RDF resource search.
             * This component is responsible for showing/hiding the search menu in the header
             */
            "onto-rdf-search": LocalJSX.OntoRdfSearch & JSXBase.HTMLAttributes<HTMLOntoRdfSearchElement>;
            "onto-repository-selector": LocalJSX.OntoRepositorySelector & JSXBase.HTMLAttributes<HTMLOntoRepositorySelectorElement>;
            "onto-search-icon": LocalJSX.OntoSearchIcon & JSXBase.HTMLAttributes<HTMLOntoSearchIconElement>;
            /**
             * A component for rendering RDF search resource input with configurable buttons.
             * This component provides a text input for search queries and a set of configurable buttons.
             */
            "onto-search-resource-input": LocalJSX.OntoSearchResourceInput & JSXBase.HTMLAttributes<HTMLOntoSearchResourceInputElement>;
            /**
             * A component for managing test context in the application. Used only for testing
             */
            "onto-test-context": LocalJSX.OntoTestContext & JSXBase.HTMLAttributes<HTMLOntoTestContextElement>;
            /**
             * OntoToastr component for displaying toast notifications.
             * This component manages a list of toast messages and handles their display,
             * automatic removal after timeout, and user interactions like hover behavior.
             */
            "onto-toastr": LocalJSX.OntoToastr & JSXBase.HTMLAttributes<HTMLOntoToastrElement>;
            "onto-toggle-switch": LocalJSX.OntoToggleSwitch & JSXBase.HTMLAttributes<HTMLOntoToggleSwitchElement>;
            "onto-tooltip": LocalJSX.OntoTooltip & JSXBase.HTMLAttributes<HTMLOntoTooltipElement>;
            "onto-user-login": LocalJSX.OntoUserLogin & JSXBase.HTMLAttributes<HTMLOntoUserLoginElement>;
            /**
             * This component displays the current user's name and provides options
             * for navigating to settings and logging out.
             */
            "onto-user-menu": LocalJSX.OntoUserMenu & JSXBase.HTMLAttributes<HTMLOntoUserMenuElement>;
            /**
             * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
             * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
             * and re-translates the passed language and translation parameters.
             * Example of usage:
             * <code>
             *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
             *    <translate-label labelKey="example.label></translate-label>
             * </code>
             */
            "translate-label": LocalJSX.TranslateLabel & JSXBase.HTMLAttributes<HTMLTranslateLabelElement>;
        }
    }
}
