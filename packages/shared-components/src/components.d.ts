/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Awaitable } from "../../api/dist/ontotext-workbench-api.d";
import { DropdownItem } from "./models/dropdown/dropdown-item";
import { DropdownItemAlignment } from "./models/dropdown/dropdown-item-alignment";
import { ExternalMenuModel } from "./components/onto-navbar/external-menu-model";
import { NavbarToggledEvent } from "./components/onto-navbar/navbar-toggled-event";
import { TranslationParameter } from "./models/translation/translation-parameter";
export { Awaitable } from "../../api/dist/ontotext-workbench-api.d";
export { DropdownItem } from "./models/dropdown/dropdown-item";
export { DropdownItemAlignment } from "./models/dropdown/dropdown-item-alignment";
export { ExternalMenuModel } from "./components/onto-navbar/external-menu-model";
export { NavbarToggledEvent } from "./components/onto-navbar/navbar-toggled-event";
export { TranslationParameter } from "./models/translation/translation-parameter";
export namespace Components {
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface OntoDropdown {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
         */
        "dropdownAlignment": DropdownItemAlignment;
        /**
          * The name for the dropdown button. This can either be a string (used directly as the button label) or a Stencil component (used to render the button content). It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonNameLabelKey } will be used.
         */
        "dropdownButtonName": string;
        /**
          * The translation label key for the dropdown button name. It will be used if {@link OntoDropdown#dropdownButtonName } is not present.
         */
        "dropdownButtonNameLabelKey": string;
        /**
          * The dropdown button tooltip. It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonTooltipLabelKey } will be used.
         */
        "dropdownButtonTooltip": string | Awaitable<string>;
        /**
          * The translation label key for the dropdown button tooltip. It will be used if {@link OntoDropdown#dropdownButtonTooltip } is not present.
         */
        "dropdownButtonTooltipLabelKey": string;
        /**
          * Specifies the events that trigger the dropdown button tooltip to appear. Multiple event names should be separated by spaces.
         */
        "dropdownTooltipTrigger": string;
        /**
          * Icon class for the main dropdown button.
         */
        "iconClass": string;
        /**
          * Array of dropdown options.
         */
        "items": DropdownItem<any>[];
        /**
          * The tooltip theme to be used. For more information {@link OntoTooltipConfiguration#theme }.
         */
        "tooltipTheme": string;
    }
    interface OntoFooter {
    }
    interface OntoHeader {
    }
    interface OntoLanguageSelector {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
         */
        "dropdownAlignment": DropdownItemAlignment;
    }
    interface OntoLayout {
    }
    interface OntoNavbar {
        /**
          * Configuration for the menu items model. This is the external model that is used to build the internal model.
         */
        "menuItems": ExternalMenuModel;
        /**
          * Configuration whether the navbar should be collapsed.
         */
        "navbarCollapsed": boolean;
        /**
          * The selected menu item. If provided, the menu item will be highlighted.
         */
        "selectedMenu": string;
    }
    interface OntoRepositorySelector {
    }
    interface OntoTooltip {
    }
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface TranslateLabel {
        /**
          * Represents a label key.
         */
        "labelKey": string;
        /**
          * Represents an array of translation parameters.
         */
        "translationParameters": TranslationParameter[];
    }
}
export interface OntoDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoDropdownElement;
}
export interface OntoNavbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOntoNavbarElement;
}
declare global {
    interface HTMLOntoDropdownElementEventMap {
        "valueChanged": any;
    }
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface HTMLOntoDropdownElement extends Components.OntoDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoDropdownElementEventMap>(type: K, listener: (this: HTMLOntoDropdownElement, ev: OntoDropdownCustomEvent<HTMLOntoDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoDropdownElementEventMap>(type: K, listener: (this: HTMLOntoDropdownElement, ev: OntoDropdownCustomEvent<HTMLOntoDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoDropdownElement: {
        prototype: HTMLOntoDropdownElement;
        new (): HTMLOntoDropdownElement;
    };
    interface HTMLOntoFooterElement extends Components.OntoFooter, HTMLStencilElement {
    }
    var HTMLOntoFooterElement: {
        prototype: HTMLOntoFooterElement;
        new (): HTMLOntoFooterElement;
    };
    interface HTMLOntoHeaderElement extends Components.OntoHeader, HTMLStencilElement {
    }
    var HTMLOntoHeaderElement: {
        prototype: HTMLOntoHeaderElement;
        new (): HTMLOntoHeaderElement;
    };
    interface HTMLOntoLanguageSelectorElement extends Components.OntoLanguageSelector, HTMLStencilElement {
    }
    var HTMLOntoLanguageSelectorElement: {
        prototype: HTMLOntoLanguageSelectorElement;
        new (): HTMLOntoLanguageSelectorElement;
    };
    interface HTMLOntoLayoutElement extends Components.OntoLayout, HTMLStencilElement {
    }
    var HTMLOntoLayoutElement: {
        prototype: HTMLOntoLayoutElement;
        new (): HTMLOntoLayoutElement;
    };
    interface HTMLOntoNavbarElementEventMap {
        "navbarToggled": NavbarToggledEvent;
    }
    interface HTMLOntoNavbarElement extends Components.OntoNavbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOntoNavbarElementEventMap>(type: K, listener: (this: HTMLOntoNavbarElement, ev: OntoNavbarCustomEvent<HTMLOntoNavbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOntoNavbarElementEventMap>(type: K, listener: (this: HTMLOntoNavbarElement, ev: OntoNavbarCustomEvent<HTMLOntoNavbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOntoNavbarElement: {
        prototype: HTMLOntoNavbarElement;
        new (): HTMLOntoNavbarElement;
    };
    interface HTMLOntoRepositorySelectorElement extends Components.OntoRepositorySelector, HTMLStencilElement {
    }
    var HTMLOntoRepositorySelectorElement: {
        prototype: HTMLOntoRepositorySelectorElement;
        new (): HTMLOntoRepositorySelectorElement;
    };
    interface HTMLOntoTooltipElement extends Components.OntoTooltip, HTMLStencilElement {
    }
    var HTMLOntoTooltipElement: {
        prototype: HTMLOntoTooltipElement;
        new (): HTMLOntoTooltipElement;
    };
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface HTMLTranslateLabelElement extends Components.TranslateLabel, HTMLStencilElement {
    }
    var HTMLTranslateLabelElement: {
        prototype: HTMLTranslateLabelElement;
        new (): HTMLTranslateLabelElement;
    };
    interface HTMLElementTagNameMap {
        "onto-dropdown": HTMLOntoDropdownElement;
        "onto-footer": HTMLOntoFooterElement;
        "onto-header": HTMLOntoHeaderElement;
        "onto-language-selector": HTMLOntoLanguageSelectorElement;
        "onto-layout": HTMLOntoLayoutElement;
        "onto-navbar": HTMLOntoNavbarElement;
        "onto-repository-selector": HTMLOntoRepositorySelectorElement;
        "onto-tooltip": HTMLOntoTooltipElement;
        "translate-label": HTMLTranslateLabelElement;
    }
}
declare namespace LocalJSX {
    /**
     * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
     * and items, making it versatile for various use cases. It also integrates with a translation service to handle
     * internationalization.
     */
    interface OntoDropdown {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
         */
        "dropdownAlignment"?: DropdownItemAlignment;
        /**
          * The name for the dropdown button. This can either be a string (used directly as the button label) or a Stencil component (used to render the button content). It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonNameLabelKey } will be used.
         */
        "dropdownButtonName"?: string;
        /**
          * The translation label key for the dropdown button name. It will be used if {@link OntoDropdown#dropdownButtonName } is not present.
         */
        "dropdownButtonNameLabelKey"?: string;
        /**
          * The dropdown button tooltip. It will be used if present; otherwise, the {@link OntoDropdown#dropdownButtonTooltipLabelKey } will be used.
         */
        "dropdownButtonTooltip"?: string | Awaitable<string>;
        /**
          * The translation label key for the dropdown button tooltip. It will be used if {@link OntoDropdown#dropdownButtonTooltip } is not present.
         */
        "dropdownButtonTooltipLabelKey"?: string;
        /**
          * Specifies the events that trigger the dropdown button tooltip to appear. Multiple event names should be separated by spaces.
         */
        "dropdownTooltipTrigger"?: string;
        /**
          * Icon class for the main dropdown button.
         */
        "iconClass"?: string;
        /**
          * Array of dropdown options.
         */
        "items"?: DropdownItem<any>[];
        /**
          * Event emitted when a dropdown item is selected. The event payload contains the value of the selected item.
         */
        "onValueChanged"?: (event: OntoDropdownCustomEvent<any>) => void;
        /**
          * The tooltip theme to be used. For more information {@link OntoTooltipConfiguration#theme }.
         */
        "tooltipTheme"?: string;
    }
    interface OntoFooter {
    }
    interface OntoHeader {
    }
    interface OntoLanguageSelector {
        /**
          * Specifies the dropdown items' alignment. If not provided, the items and the dropdown button will be aligned to the left.
         */
        "dropdownAlignment"?: DropdownItemAlignment;
    }
    interface OntoLayout {
    }
    interface OntoNavbar {
        /**
          * Configuration for the menu items model. This is the external model that is used to build the internal model.
         */
        "menuItems"?: ExternalMenuModel;
        /**
          * Configuration whether the navbar should be collapsed.
         */
        "navbarCollapsed"?: boolean;
        /**
          * Event fired when the navbar is toggled.
         */
        "onNavbarToggled"?: (event: OntoNavbarCustomEvent<NavbarToggledEvent>) => void;
        /**
          * The selected menu item. If provided, the menu item will be highlighted.
         */
        "selectedMenu"?: string;
    }
    interface OntoRepositorySelector {
    }
    interface OntoTooltip {
    }
    /**
     * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
     * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
     * and re-translates the passed language and translation parameters.
     * Example of usage:
     * <code>
     *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
     *    <translate-label labelKey="example.label></translate-label>
     * </code>
     */
    interface TranslateLabel {
        /**
          * Represents a label key.
         */
        "labelKey"?: string;
        /**
          * Represents an array of translation parameters.
         */
        "translationParameters"?: TranslationParameter[];
    }
    interface IntrinsicElements {
        "onto-dropdown": OntoDropdown;
        "onto-footer": OntoFooter;
        "onto-header": OntoHeader;
        "onto-language-selector": OntoLanguageSelector;
        "onto-layout": OntoLayout;
        "onto-navbar": OntoNavbar;
        "onto-repository-selector": OntoRepositorySelector;
        "onto-tooltip": OntoTooltip;
        "translate-label": TranslateLabel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A reusable dropdown component built using StencilJS. This component supports configurable labels, tooltips, icons,
             * and items, making it versatile for various use cases. It also integrates with a translation service to handle
             * internationalization.
             */
            "onto-dropdown": LocalJSX.OntoDropdown & JSXBase.HTMLAttributes<HTMLOntoDropdownElement>;
            "onto-footer": LocalJSX.OntoFooter & JSXBase.HTMLAttributes<HTMLOntoFooterElement>;
            "onto-header": LocalJSX.OntoHeader & JSXBase.HTMLAttributes<HTMLOntoHeaderElement>;
            "onto-language-selector": LocalJSX.OntoLanguageSelector & JSXBase.HTMLAttributes<HTMLOntoLanguageSelectorElement>;
            "onto-layout": LocalJSX.OntoLayout & JSXBase.HTMLAttributes<HTMLOntoLayoutElement>;
            "onto-navbar": LocalJSX.OntoNavbar & JSXBase.HTMLAttributes<HTMLOntoNavbarElement>;
            "onto-repository-selector": LocalJSX.OntoRepositorySelector & JSXBase.HTMLAttributes<HTMLOntoRepositorySelectorElement>;
            "onto-tooltip": LocalJSX.OntoTooltip & JSXBase.HTMLAttributes<HTMLOntoTooltipElement>;
            /**
             * The purpose of this component is to display translated literals in the DOM. A Stencil component re-renders when a prop or state changes,
             * but it may not re-render when the language changes. In such cases, this component should be used. It handles language change events
             * and re-translates the passed language and translation parameters.
             * Example of usage:
             * <code>
             *    <translate-label labelKey={item.labelKey} translationParameter={item.translationParameter}></translate-label>
             *    <translate-label labelKey="example.label></translate-label>
             * </code>
             */
            "translate-label": LocalJSX.TranslateLabel & JSXBase.HTMLAttributes<HTMLTranslateLabelElement>;
        }
    }
}
