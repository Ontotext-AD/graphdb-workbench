def runStages() {
    stage('Install') {
        sh "npm install"
    }

    stage('Validate translations') {
        sh 'node scripts/validate-translations.js || exit 1'
    }

    stage('Build') {
        sh "npm run build"
    }

//     stage('Sonar') {
//         withSonarQubeEnv(env.SONAR_ENVIRONMENT) {
//             script {
//                 if (scmUtil.isMaster()) {
//                     sh "node sonar-project.js --branch='${scmUtil.getCurrentBranch()}'"
//                 } else {
//                     sh "node sonar-project.js --branch='${scmUtil.getSourceBranch()}' --target-branch='${scmUtil.getTargetBranch()}' --pull-request-id='${scmUtil.getMergeRequestId()}'"
//                 }
//             }
//         }
//     }

    stage('Analysis') {
        script {
            docker.image('sonarsource/sonar-scanner-cli:4.6').inside.inside("-v /usr/bin/node:/usr/bin/node -v /usr/bin/npm:/usr/bin/npm") {
                withSonarQubeEnv("New-sonar") {
                    sh """
                        sonar-scanner \
                        ${sonar.resolveBranchArguments()} \
                        -Dsonar.projectKey="Ontotext-AD_graphdb-workbench" \
                        -Dsonar.projectName="graphdb-workbench"
                    """
                }
            }
            onMergeRequest {
                timeout(time: 5, unit: 'MINUTES') {
                    onFailedSonarGate {
                        unstable("Pipeline is unstable due to Sonar quality gate failure")
                    }
                }
            }
        }
    }

    stage('Acceptance') {
        if (!scmUtil.isMaster()) {
            withKsm(application: [[
                credentialsId: 'ksm-jenkins',
                secrets: [
                    [
                        destination: 'file',
                        filePath: 'graphdb.license',
                        notation: 'keeper://zn9mpFS1tZ0dNcqmsNhsLg/file/graphdb-b64.license'
                    ]
                ]
            ]]) {
                sh 'cp graphdb.license ./test-cypress/fixtures/'
            }
            sh "ls ./test-cypress/fixtures/"
            script {
                dockerCompose.buildCmd(options: ["--force-rm", "--no-cache", "--parallel"])
                dockerCompose.upCmd(options: ["--abort-on-container-exit", "--exit-code-from cypress-tests"])
            }
        }
    }
}

return this
